---
title: "Data management: metadata correction and cleansing"
---

## Reproducibility

I list below the R packages required to reproduce the analyses.

```{r}
#| label: setup

## data wrangling
library(dplyr)
library(tidyr)
library(stringr)
library(readr)
library(readxl)
library(purrr)

## reporting
library(flextable)

## plotting
library(ggplot2)
library(ComplexHeatmap)
library(cowplot)
library(grid)
library(RColorBrewer)
library(igraph)

## auxiliary functions
source("R/utils.R")
today_date <- "2025-04-28"
## today_date <- format(Sys.Date(), "%Y-%m-%d")

## set the seed, for fixing generation of ComplexHeatmaps (dendogram clustering)
set.seed(20)
```

- [Original Google Drive repository](https://drive.google.com/drive/folders/1pMSX4M4kHcDGxcsCzsMYHHM6VRvBHHUO).

    
```{r}
#| label: format-barcode-csv
#| echo: false
#| eval: false
barcode_files <- list.files("./data/barcode-counts/", 
                               pattern = "exp.*\\.xlsx", 
                               full.names = TRUE)

## change format + barcode name
barcode_matrices <- lapply(barcode_files, function(old_filename) {
  expression_matrix <- readxl::read_excel(old_filename) |> 
    rename(barcode_id = 1)
  
  new_filename <- old_filename |> basename() |> tools::file_path_sans_ext()
  
  readr::write_csv(expression_matrix, 
                   file = file.path("data", "barcode-counts", paste0(new_filename, ".csv")))
  
})
```

    
### Barcode counts cleaning {#sec-select-exp}

We early discarded `exp130921_in vivo.csv` from the experiences

<!-- - ['Experiment Date': `130921` and 'Run Date': `101121` ]{fg="red"} -->

<!-- ```{r} -->
<!-- #| label: select-expression-130921 -->
<!-- #| eval: false -->
<!-- #| echo: false -->

<!-- exp130921_expression <- readr::read_csv("data/barcode-counts/exp130921.csv")  -->
<!-- exp130921_1_expression <- readr::read_csv("data/barcode-counts/exp130921_1.csv")  -->
<!-- selected_dataset <- compare_dataframes(exp130921_expression, exp130921_1_expression) -->
<!-- ``` -->

<!-- [Conclusion: Keep `exp130921.csv`, and discard expression file `exp130921_1.csv`. The latter indeed exhibited fewer barcode IDs, while on the shared overlap, both datasets are identical.]{fg="red"} -->

```{r}
#| label: select-expression-300821
#| eval: false
#| echo: false


exp300821 <- readr::read_csv("data/barcode-counts/exp300821.csv") 

## fake additional colnames, containing only missing colnames
exp300821_whole <- readr::read_csv2("old-data-backup/data-raw/barcode-counts/exp300821.csv") |> 
  rename(barcode_id = 1)
selected_dataset <- compare_dataframes(exp300821, exp300821_whole)

setdiff(exp300821$barcode_id, exp300821_whole$barcode_id)
cor(exp300821$Osimer4_100n_exp300821_run290921_08, exp300821_whole$Osimer4_100n_exp300821_run290921_08)

readr::write_csv(exp300821, "data/barcode-counts/exp300821.csv")
```

```{r}
#| label: rename-erroneous-date-271221
#| eval: false
#| echo: false
#| lst-label: lst-rename-bad-date
#| lst-cap: Update labelling of latest experience.

exp271221 <- readr::read_csv("data/barcode-counts/exp271221.csv") 
exp271221_whole <- readr::read_csv2("old-data-backup/data-raw/barcode-counts/exp211221cor.csv") |> 
  rename(barcode_id = 1)
selected_dataset <- compare_dataframes(exp271221, exp271221_whole)

file.rename("data/barcode-counts/exp211221.csv", "data/barcode-counts/exp271221.csv") 
```

[In @lst-rename-bad-date, we rename expression file `exp211221.csv` into `exp271221.csv`, relying on date annotations.]{fg="red"}

```{r}
#| label: discriminate-200921-dose-response-standard
#| eval: false
#| echo: false

exp200921_standard <- readr::read_csv("data/barcode-counts/exp200921.csv") 
exp200921_dose_response <- readr::read_csv("data/barcode-counts/exp200921_dose response osim.csv")


exp200921_global <- readr::read_tsv("data/barcode-counts/exp200921_whole exp.tabular") |> dplyr::rename(barcode_id="key")

## able to map all samples from global to either dose response or standard
setdiff(colnames(exp200921_global), 
        union(colnames(exp200921_dose_response), colnames(exp200921_standard)))

## all dose response variables can be found in whole experiment
setdiff(colnames(exp200921_dose_response), colnames(exp200921_global))
readr::write_csv(exp200921_global |> 
                   dplyr::select(dplyr::all_of(colnames(exp200921_dose_response))), 
                 "data/barcode-counts/exp200921_dose response osim.csv")

## 5 compounds (so 5*4=20) replicates are not avalaible in whole experiment
## waiting for confirmation before removing them
intersect(colnames(exp200921_standard), colnames(exp200921_global))
print("\n\n")
setdiff(colnames(exp200921_standard), colnames(exp200921_global))

cat(intersect(colnames(exp200921_standard), colnames(exp200921_global)), 
    file = "./data/logs/replicates_preserved_200921.txt", sep = "\n")
cat(setdiff(colnames(exp200921_standard), colnames(exp200921_global)), 
    file = "./data/logs/replicates_discarded_200921.txt", sep = "\n")

## selected_dataset <- compare_dataframes(exp200921_standard, exp200921_dose_response)
```

[While the *dose-response* experience `exp200921_dose response osim` exhibits distinct biological objective, it turned out that the 4 control biological replicates are shared with classical compound response comparison `exp200921.csv`. However, **the number of sequenced barcode IDs differ in both experiences!!** In addition, note that `exp200921.csv` has been tagged as discarded, except for the Controls!!]{fg="red"}
  
Code snippets in @lst-281022 and @lst-281022-time-course aim at replacing unprecise labelling of barcode IDs (no concentration, no time duration, ...) in the 2022 batch experiences.

```{r}
#| label: select-expression-281022
#| eval: false
#| echo: true
#| lst-label: lst-281022
#| lst-cap: Update labelling of latest experience.

## extract old colnames
exp281022_expression <- readr::read_csv("data/barcode-counts/exp281022.csv") 
## cat(colnames(exp281022_expression), file = "281022_old_labels.txt", sep = "\n")

## extract mapping old_names with new_names
mapping_old_new_281022 <- readxl::read_excel("data/Table of compounds_whole_2025-04-28.xlsx", 
                                             sheet = "Sample Mapping 281022")

labels_old_new_281022 <- setNames(object = mapping_old_new_281022$OLD_replicate_label, 
                                  nm = mapping_old_new_281022$NEW_replicate_label)

## apply change labelling
exp281022_expression <- exp281022_expression |> 
  dplyr::rename(dplyr::all_of(labels_old_new_281022))

readr::write_csv(exp281022_expression, "data/barcode-counts/exp281022.csv")
```


```{r}
#| label: select-expression-281022-time-course
#| eval: false
#| echo: true
#| lst-label: lst-281022-time-course
#| lst-cap: Update time course experiences.

exp281022_expression_timecourse <- readr::read_csv("data/barcode-counts/exp281022_time course.csv") 
## cat(colnames(exp281022_expression_timecourse), file = "281022_timecourse_old_labels.txt", sep = "\n")

## update colnames ----

mapping_old_new_time_course <- read_excel("data/Table of compounds_whole_2025-04-28.xlsx", 
                                     sheet = "Sample Mapping Time Course")

labels_old_new_time_course <- setNames(object = mapping_old_new_time_course$OLD_replicate_label, 
                                       nm = mapping_old_new_time_course$NEW_replicate_label)

## apply change labelling
exp281022_expression_timecourse <- exp281022_expression_timecourse |> 
  dplyr::rename(dplyr::all_of(labels_old_new_time_course))

readr::write_csv(exp281022_expression_timecourse,
                 "data/barcode-counts/exp281022_time course.csv")

## To evaluate whether controls are different between experiment 281022 and 281022 Time Course
controls_exp281022 <- exp281022_expression |> 
  select(key_barcode, dplyr::matches("^ctl")) |> 
  dplyr::inner_join(exp281022_expression_timecourse |> 
                      select(key_barcode, dplyr::matches("^Ctrl")),
                    by="key_barcode")
cor(controls_exp281022$ctl2, controls_exp281022$Ctrl2) ## they strongly correlate with each other, but not a perfect match -> controls are indeed distinct

```




<!-- #### Additional comments -->

<!-- - `exp130921_in_vivo`: cells injected in living mice (control versus osermintinimb). -->
<!-- - `exp281022`: control, protac, cetuximab and gefitinib ($n=4$ replicates each time) were sampled in T25 flasks. P42 and P43 correspond to cells grown without treatment for 42 or 43 passages, and were used for evaluating *barcode drift* technical artefact. -->
<!-- - `exp281022_time course`: time course experiment. -->

#### TODO: barcode counts inconsistencies

Things to consider:

- [Format used is **French csv**, instead of international CSV. CSV means for 'comma-separated value', maybe consider switching [Excel settings](https://support.microsoft.com/en-us/office/import-or-export-text-txt-or-csv-files-5250ac4c-663c-47ce-937b-339e391393ba).]{fg="red"}
- [I rename the first colname of each expression file as `barcode_id`, storing unequivocal tag.]{fg="red"}
- Some barcode counts exhibit final line `index`, for which reason?

#### Overview of barcode counts

We report in @tbl-overview-barcode-counts a summary of the barcode counts (File location, `batch_id`, and dimensions of the counts matrix) considered for the generation of the Heatmaps, and the construction of a drug-drug network.

```{r}
#| label: tbl-overview-barcode-counts
#| tbl-cap: "Overview of the Barcoding Batches."
#| tbl-subcap:
#|   - "Kept Batches"
#|   - "Removed batches"
#| layout-ncol: 2

## 1) summarise kept batches ----
barcode_files <- list.files("./data/barcode-counts/",
                            pattern = "exp.*\\.csv",
                            full.names = TRUE)

kept_barcode_summaries <- purrr::map(barcode_files, function(filename) {
  barcode_counts <- readr::read_csv(filename, show_col_types = FALSE)
  experience_name <- filename |> basename() |> tools::file_path_sans_ext()
  experience_summary <- tibble::tibble(`Experience Name`= experience_name,
                                       Features= paste0("Barcode matrix contains: ",
                                                        nrow(barcode_counts),
                                                        " unique barcode IDs, and ",
                                                        ncol(barcode_counts)-1, " replicates."))
  return(experience_summary)
}) |>
  purrr::list_rbind()
flextable::flextable(kept_barcode_summaries) |> 
  bold(part="header")

## 2) summarise discarded batches ----
discarded_files <- list.files("./data/barcode-counts/temp discarded/",
                            pattern = "exp.*\\.csv",
                            full.names = TRUE)

## change format + barcode name
barcode_discarded_summaries <- purrr::map(discarded_files, function(filename) {
  barcode_counts <- readr::read_csv(filename, show_col_types = FALSE)
  experience_name <- filename |> basename() |> tools::file_path_sans_ext()
  experience_summary <- tibble::tibble(`Experience Name`= experience_name,
                                       Features= paste0("Barcode matrix contains: ",
                                                        nrow(barcode_counts),
                                                        " unique barcode IDs, and ",
                                                        ncol(barcode_counts)-1, " replicates."))
  return(experience_summary)
}) |>
  purrr::list_rbind()

flextable::flextable(barcode_discarded_summaries) |> 
  bold(part="header")

```

In @tbl-overview-barcode-samples, `{r} nrow(kept_barcode_summaries)` barcode experiences were included in the analysis, whereas `{r} nrow(barcode_discarded_summaries)` batches/experiences were not included.


### Phenotype metadata cleaning {#sec-metadata-phenotypes}

- [General question: what's the difference between `Run Date` and `Experiment Date`?]{fg="red"}

Most of the R instructions reported in this section aim at rendering the `Table of compounds` file compliant with the `tidy` format, see @tip-tidyformat. These data-wrangling operations are split in 4 steps:

1. In @lst-process-pheno1, we homogenise `Concentrations`, `Date` and `Duration` to ISO standards, while dealing with erroneous missing values generated by fused Excel cells. [Besides, we removed special, non-ascii characters that could not be processed by visualisation plots, such as $NF-\kappa B$.]{fg="red"}

2. In @lst-process-pheno2, we retrieve from each individual barcode counts profile, the individual replicates ID identifying unequivocally each replicate. We set apart replicates that could be mapped back to original `Table of compounds` file.

3. In @lst-process-pheno3, we merge together in a comprehensive phenotype table the short `Samples_ID` (short term referring to drugs listed in `Compound` column), the full `Compound` (complete name of drugs) and map each of them to its complete list of replicates (from 2 to 8). We save the output in `data-derived`.

4. Finally, in @lst-check-pheno-data-1 and @lst-check-pheno-data-2, we perform several posterior *data integrity checks* to verify if i) we were able to map each individual replicate ID to its original ID in `Table of compounds`, and ii) if the number of replicates reported in [`Table of compounds`](data/Table of compounds_whole_2025-04-28.xlsx) was consistent with the number of barcode profiles.

```{r}
#| label: process-pheno1
#| lst-label: lst-process-pheno1
#| lst-cap: Coerce original Excel file reporting experimental design to tidy format.

pheno_colnames <- c(Pathway = "Pathways", MoA = "...2", 
                    Compound = "Samples", Replicates = "Replicates",
                    Concentrations = "Concentrations", Date = "Experiment date",
                    `Run date` = "Run date", Duration="Duration", 
                    Kept="Kept", Comments = "Comments")

## prune irrelevant colnames ----
## data/Table of compounds_stringent_2025-04-18.xlsx
pheno_data <- readxl::read_xlsx("data/Table of compounds_whole_2025-04-28.xlsx",
                                sheet = "Experimental Design",
                                col_types = c(rep("text", 3), "numeric", 
                                              rep("text", 4), "logical", "text")) |>
  dplyr::rename(dplyr::all_of(pheno_colnames)) |>
  tidyr::fill(Pathway, MoA, .direction = "down")

pheno_data_discarded <- pheno_data |> 
  dplyr::filter(!Kept)

## Add batches and correct for fused Excel cells ----

pheno_data <- pheno_data |> 
  ## extract last 6 numbers
  dplyr::mutate(Compound = if_else(grepl("Control", MoA, ignore.case = TRUE),
                                  MoA, Compound),
                `Run date` = stringr::str_sub(`Run date`, -6, -1),
                Batch_ID= paste0("exp", Date)) |> 
  tidyr::fill(Compound, .direction = "down") |>
  ## remove unwanted replicates
  dplyr::filter(Kept) |> 
  dplyr::mutate(Batch_ID = dplyr::if_else(Comments %in% c("Dose Response"), 
                                          "exp200921_dose response osim", Batch_ID)) |> 
  dplyr::mutate(Batch_ID = dplyr::if_else(Comments %in% c("Time Course"), 
                                          "exp281022_time course", Batch_ID), 
                Pathway = if_else(is.na(Pathway), MoA, enc_to_ascii(Pathway))) |> 
  dplyr::select(- Comments, -Kept) |> 
  dplyr::distinct(.keep_all = TRUE) ## remove duplicates

## format concentrations, creating both 'Concentrations_ID' and 'Concentrations' in Moles ----
pheno_data <- pheno_data |> 
  dplyr::mutate(Concentrations=if_else(Compound=="Control", "000 uM", Concentrations)) |> 
  dplyr::mutate(Concentrations=if_else(Compound=="Osimertinb+sorafenib", "015 uM", Concentrations)) |>
  tidyr::separate_wider_delim(Concentrations, delim = " ", names = c("Concentrations Value", "Unit"), cols_remove = FALSE) |> 
  dplyr::rename(OLD_Concentrations=Concentrations) |> 
  dplyr::mutate(Unit = case_when(
    Unit %in% c("uM", "µM", "µg/ml") ~ "u",
    Unit == "nM" ~ "n", 
    Unit %in% c("mg/kg", "mM") ~ "m", 
  )) |> 
  dplyr::mutate(Concentrations=parse_number(`Concentrations Value`, trim_ws = TRUE, 
                                            locale = locale(decimal_mark = ",", grouping_mark = "."))) |> 
   dplyr::mutate(Concentrations = case_when(
    Unit == "u" ~ Concentrations *10^-6,
    Unit == "n" ~ Concentrations *10^-9, 
    Unit == "m" ~ Concentrations *10^-3)) |> 
  dplyr::mutate(`Concentrations Value`=parse_number(`Concentrations Value`, trim_ws = TRUE, 
                                            locale = locale(decimal_mark = ",", grouping_mark = ".")) |> 
                  format_concentrations()) |> 
  tidyr::unite(col ="Concentrations_ID", `Concentrations Value`, Unit, sep = "")

## format Durations, creating both 'Duration_ID' and 'Duration' as an integer value in Days ----
pheno_data <- pheno_data |> 
  ## extract last 6 numbers, as the only ones used for identification of samples downstream
  dplyr::mutate(Duration_ID = Duration,
                Duration = parse_number(Duration, trim_ws = TRUE, 
                                        locale = locale(decimal_mark = ".")), 
                Duration = dplyr::if_else(grepl("m$",  Duration_ID),
                                          Duration*30, Duration)) 
  
```

::: {.callout-important title="Metadata inconsistencies and Conversion to UIC Units" collapse="true"}

<!-- - [For compound `SBI-0206965`, both `Date` and `Run date` were wrongly reported (either not stored in the proper barcode counts profile, or mistyped in `Table of Compound`).]{fg="red"} -->

- [In `Run date`, when there was a range instead of a fixed Date, I kept only the end of the interval, as used for labelling colnames in barcode counts.]{fg="red"}

- [Homogenise units for the `Concentrations` colname: convert everything to moles.]{fg="red"}

- [Homogenise units for `Date` and `Run date`, using international ISO 8601 format: `YYYY-MM-DD`]{fg="red"}

:::

In @lst-process-pheno2 and @lst-process-pheno3, we identify which raw barcode counts matrices avalaible in folder `barcode-counts` are not reported in the global experimental dataset, and reciprocally. Finally, we only **keep experiences that are both reported in `Table of compounds` and present in `barcode-counts` folder.**.

```{r}
#| label: process-pheno2
#| lst-label: lst-process-pheno2
#| lst-cap: Identify shared experience IDs between experimental design table (`Table of compounds`), and barcode-count counts profiles.

## keep only relevant files 
barcodes_filenames <- list.files("./data/barcode-counts/",
                                pattern = "^exp.*\\.csv$")

barcodes_IDs <- readxl::read_xlsx("data/Table of compounds_whole_2025-04-28.xlsx",
                                       sheet="Batch Mapping") |> 
  select(Filename, Batch_ID) |> 
  filter(!Batch_ID %in% c("exp130921_in vivo")) |> 
  mutate(Filename =paste0(Filename, ".csv"), 
         Date = stringr::str_extract(Batch_ID, "(?<=^exp)[[:digit:]]{6}"))

```


<!-- ::: {.callout-important title="Missing information on Table of Compound and missing Experiences"} -->

<!-- We note the following inconsistencies: -->

<!-- 1. Using ``{r} setdiff(barcodes_filenames, barcodes_IDs$Filename)``, we note that the following files present in `data-raw` will be excluded: `{r} setdiff(barcodes_filenames, barcodes_IDs$Filename)`. For details, report to @sec-select-exp. -->

<!-- 2. Using ``{r} setdiff(barcodes_IDs$Filename, barcodes_filenames)``, we certified that all remaining filenames in the folder were properly mapped. -->

<!-- 3. Using ``{r} setdiff(pheno_data$Batch_ID, barcodes_IDs$Batch_ID)``, all experiments `{r} paste(setdiff(pheno_data$Batch_ID, barcodes_IDs$Batch_ID), collapse = ", ")` reported in original `Table of Compound` could have been mapped back to an existing experiment, once `Control - time zero` have been discarded.  -->

<!-- ::: -->

To generate the final phenotype dataset, we only keep experiences that were reported both in `Table of Compound` and folder `barcode-counts` in @lst-process-pheno3. [**Please ensure that `Drugs Mapping` sheet in [`Table of compounds`](data/Table of compounds_whole_2025-04-28.xlsx) is correct.**]{fg="red"}

```{r}
#| label: process-pheno3
#| lst-label: lst-process-pheno3
#| lst-cap: Map each compound to its full list of replicates. Generate a `Batch_ID` to unequivocally ientify each run of experiences, and convert all run Dates to their international format.

## step 1) keep only shared Batch_ID experiences ----
barcodes_IDs <- barcodes_IDs |>
  dplyr::semi_join(pheno_data, by="Batch_ID")
## exp201021 is discarded, that's normal, we just want to keep the controls!!
pheno_data <- pheno_data |>
  dplyr::semi_join(barcodes_IDs, by="Batch_ID")

## step 2) extract individual replicate IDs directly from sample experiences ----
## Filename <- "exp281022.csv"; Batch_ID <- "exp281022"; Date <- "281022"
ID_mapping <- purrr::pmap(barcodes_IDs, function(Filename, Batch_ID, Date) {
  ## build path
  counts_path <- file.path("data","barcode-counts", 
                               paste0(Filename))
  
  ## extract replicate names (reading the header)
  replicates_ID <- strsplit(readLines(counts_path, n = 1), split = ",")[[1]] |>
    str_subset("\\S") |> ## remove empty strings and 'key'
    str_subset("barcode_id", negate = TRUE)

  ## ID: combination of letters, numbers and -, followed by '[1-4]_', starting the sample's name
  dataset_ID <- tibble::tibble(Batch_ID = Batch_ID, 
                               Date = stringr::str_extract(replicates_ID,
                                                           "(?<=_exp)[[:alnum:]]{6}"),
                               Replicates_ID = replicates_ID,
                               `Run date` = stringr::str_extract(replicates_ID,
                                                                 "(?<=_run)[[:alnum:]]{6}(?=_)"),
                               Concentrations_ID = stringr::str_extract(replicates_ID, 
                                                                        "(?<=[1-8]_)[[:digit:]]{3}[gmnux]{1}(?=_exp)")) |> 
    ## account for second notation syntax for concentrations
    dplyr::mutate(Concentrations_ID = if_else(is.na(Concentrations_ID), 
                                              stringr::str_extract(replicates_ID,
                                                                   "(?<=[1-8]_)[0-9]{1}\\.[0-9]{2}[gmnux]{1}(?=_exp)"),
                                              Concentrations_ID))
  
  ## Deal with two time notations
  if (grepl("Time",Batch_ID, ignore.case = TRUE)) {
    dataset_ID <- dataset_ID |> 
      dplyr::mutate (Samples_ID = stringr::str_extract(replicates_ID,
                                                       "(?<=_)[[[:alnum:]]\\-]+(?=[1-8]_)"), 
                     Duration_ID=stringr::str_extract(replicates_ID,
                                                       "^[[[:alnum:]]\\.]{1,3}[dm](?=_)"))
  }
  else {
      dataset_ID <- dataset_ID |> 
      dplyr::mutate (Samples_ID = stringr::str_extract(replicates_ID,
                                                       "^[[[:alnum:]]\\-]+(?=[1-8]{1}_)"), 
                     Duration_ID="9d")
  }
                                 
  return(dataset_ID)
}) |>
  purrr::list_rbind()

## deal with specific p42 and p43
ID_mapping <- ID_mapping |> 
  dplyr::mutate(Samples_ID = if_else(grepl("^p42", Replicates_ID), "p42", Samples_ID), 
                Samples_ID = if_else(grepl("^p43", Replicates_ID), "p43", Samples_ID))

## remove irrelavant samples
ID_mapping <- ID_mapping |> 
  dplyr::filter(!grepl("^p42|^p43|^CTRL", Replicates_ID))


## detect miscatech samples
## ID_mapping_missing <- ID_mapping |>
##   filter(if_any(everything(), is.na))

## step 3) map short compound IDs with full compound names ----
mapping_compounds <- readxl::read_xlsx("data/Table of compounds_whole_2025-04-28.xlsx",
                                sheet = "Drugs Mapping")
ID_mapping <- ID_mapping |> 
  inner_join(mapping_compounds, by = "Samples_ID")
## test <- ID_mapping |> anti_join(mapping_compounds, by = "Samples_ID")
## test2 <- mapping_compounds |> anti_join(ID_mapping, by = "Samples_ID")
```

<!-- - `X13271` with concentration `005u`, both run on `Run Date: 180821`, have been discarded in *counts*. -->

Finally, in @lst-check-pheno-data-1, we map all replicates (one column in a given barcode count matrix) to its comprehensive metadata descripion (stored in `Tables of compounds`), using as **primary and foreign keys** the following 6 variables: `Batch_ID`,  `Compound`, `Duration_ID`, `Run date`, `Date`, and `Concentrations_ID`.

```{r}
#| label: tbl-check-pheno-data
#| lst-label: lst-check-pheno-data-1 
#| lst-cap: "Extract discarded replicates"
#| tbl-cap: Identify set of experiences reported in `Table of compounds` that could not be mapped against their corresponding Barcode counts replicates. We check this information with an `anti_join` between original *phenotype* and *counts*, returning samples from `Table of Compound` that could not have been mapped back.

replicates_discarded <- dplyr::anti_join(ID_mapping, pheno_data,
                                     by = c("Batch_ID",  "Compound", "Duration_ID",
                                            "Run date", "Date", "Concentrations_ID"))

pheno_data_unmapped <- dplyr::anti_join(pheno_data,
                                     ID_mapping,
                                     by = c("Batch_ID",  "Compound", "Duration_ID",
                                            "Run date", "Date", "Concentrations_ID"))

pheno_data_unmapped |> 
  arrange(Compound, Date, Concentrations_ID) |> 
  flextable() |> 
  bold(part = "header")
```

In @tbl-check-pheno-data-2, we check discrepancies between the number of barcode replicates reported in `Table of compounds` with the number of replicates avalaible in barcode counts matrices. [And it turned out that `compound`: XAV-939, `Date`: 220322, is reported with 4 replicates, while only 2 could be found in [`exp220322` barcode count matrix](./data/barcode-counts/exp220322.csv)]{fg="red"}

```{r}
#| label: tbl-check-pheno-data-2
#| lst-label: lst-check-pheno-data-2
#| lst-cap: Secound round of data wrangling quality controls on *counts* versus *phenotype data*, focusing on divergent number of replicates.
#| tbl-cap: Secound round of data wrangling quality controls on *counts* versus *phenotype data*, focusing on divergent number of replicates.

replicate_inconsistencies <- pheno_data |> 
  dplyr::inner_join(ID_mapping,
                    by = c("Batch_ID", "Date", 
                           "Compound", "Run date",
                           "Concentrations_ID", "Duration_ID")) |>
  group_by(Batch_ID, Compound, Date, Replicates, Concentrations_ID,Duration_ID) |>
  summarise(n=n()) |>
  filter(n!=Replicates)

flextable(replicate_inconsistencies) |>
  autofit() |>
  bold(part = "header")

```

#### Save phenotype Metadata

By applying all the formatting analyses reported in @sec-metadata-phenotypes, we generate in @tbl-phenotype-metadata-saving a global metadata phenotypic table, adhering to tidy principles [@tip-tidyformat]. 

::: {#tip-tidyformat .callout-tip title="Tidy Data Format (Key Principles)" collapse="true"}

1. **Each variable has its own column**.
2. **Each observation has its own row** – Every row corresponds to one observation.
3. **Each value has its own cell** – Each cell contains a single, unique value.

This format streamlines data wrangling, and generally speaking, data analysis and visualisation. In other words, prefer simpler `CSV` formats for the experimental design, and avoid *cell fusion* in Excel documents. Finally, for the formatted tabular representation in documentations, I use `flextable`.

:::

```{r}
#| label: tbl-phenotype-metadata-saving
#| lst-label: lst-save-pheno-metadata
#| lst-cap: Save the final metadata annotations for barcodes, using Today's date for historical versioning.

## step 4) Use international date formats ----
pheno_data_formatted <- pheno_data |> 
  dplyr::inner_join(ID_mapping,
                    by = c("Batch_ID", "Date", 
                           "Compound", "Run date",
                           "Concentrations_ID", "Duration_ID")) |> 
  dplyr::select(Batch_ID, Pathway, MoA,
                Compound, Samples_ID, 
                Replicates, Replicates_ID,
                Concentrations, Concentrations_ID, 
                Date, `Run date`, Duration, Duration_ID) |> 
  ## convert to ISO 1860 Date format
  mutate(Date = lubridate::dmy(Date) |> format(),
         `Run date`= lubridate::dmy(`Run date`), 
  ## artifically de-duplicate controls for exp, simplify the analytical workflow 
  Replicates_ID = dplyr::if_else(Batch_ID %in% c("exp200921_dose response osim") &
                                   Compound=="Control",
                                 gsub("exp200921_", "exp200921_dose_response_", Replicates_ID),
                                 Replicates_ID))

## 2) QC: guarantee uniqueness of the replicates
pheno_data_deduplicated <- pheno_data_formatted |> 
  dplyr::distinct(Replicates_ID, .keep_all = TRUE)
all.equal(pheno_data_deduplicated, pheno_data_formatted)

## 3) save as .xlsx file discarded and preserved replicates

barcode_counts_summaries <- list("kept counts" = kept_barcode_summaries,
                                 "kept compounds" = pheno_data,
                                 "kept replicates" = pheno_data_formatted |> 
                                   select(Compound, Replicates_ID),
                                 "discarded counts" = barcode_discarded_summaries, 
                                 "discarded compounds"=pheno_data_discarded, 
                                 "discarded replicates" = replicates_discarded)

openxlsx::write.xlsx(x = barcode_counts_summaries,
                     file = paste0("./data/logs/barcode_metadata_overview_",
                                   today_date,".xlsx"),
                     overwrite = TRUE, asTable = TRUE)


## 4) save the tidy phenotype metatada table ----
readr::write_csv(pheno_data_formatted,
                 file = paste0("data/pheno_data_metadata_", today_date,".csv"))

flextable::flextable(head(pheno_data_formatted)) |> 
  autofit() |> 
  bold(part="header")
```


**Conclusion**: on a total of `{r} nrow(ID_mapping)`, `{r} nrow(pheno_data_formatted)` replicates are kept, and `{r} nrow(replicates_discarded)` replicates were removed.


### Compute Compound Similarities

- [Actual computation of the correlation matrix using `stats::cor`.]{fg="blue"}

- [Yet, we have to try other correlation methods on the continuous space, or consider other metrics if working on the discrete space. Unbalanced Wassertein distance, or relatives, for distinct input and output dimensions.]{fg="red"}

#### Compound Heatmaps

- Some tutorials:

  - [Blend of useful resources on generating Heatmaps](https://www.linkedin.com/posts/%F0%9F%8E%AF-ming-tommy-tang-40650014_making-a-heatmap-is-an-essential-skill-for-activity-7317543424511868928-F25t):
  
  - [Mapping quantitative data to color](https://www.nature.com/articles/nmeth.2134), from @gehlenborg2012nm:
    
  - **Real-Life Examples** with `ComplexHeatmap`: 
  
    - [Heatmap with transcriptomic expression](https://rpubs.com/crazyhottommy/heatmap_demystified)
    - [Heatmap with genomic expression](https://jokergoo.github.io/ComplexHeatmap-reference/book/more-examples.html)
    - [Genome-level Heatmap](https://jokergoo.github.io/ComplexHeatmap-reference/book/genome-level-heatmap.html)
    - [Plotting large heatmaps in R](https://gdevailly.netlify.app/post/plotting-big-matrices-in-r) and [*Rasterisation*, with thousands of genes to be considered](https://jokergoo.github.io/2020/06/30/rasterization-in-complexheatmap).
    - [Control size of Heatmaps](https://jokergoo.github.io/2020/05/11/set-cell-width/height-in-the-heatmap/)
    
  - **Real-life examples** with [`ggplot2`](https://github.com/theislab/atlas-feature-selection-benchmark/blob/b89fc0f66747062e6e1b4b35bd392b27ad035295/analysis/R/plotting.R#L8)
  
  - **Real-Life examples** with [`funkyheatmap` CRAN package](https://funkyheatmap.github.io/)

##### Heatmap with Pearson correlation score

- Heatmap in @fig-heatmap-normalised-replicate is generated at the replicate level:

```{r}
#| label: fig-heatmap-normalised-replicate
#| fig-cap: "Heatmap of normalised replication scores, \n generated with the simple Pearson Correlation score."

## Read SummarizedExperiment object
se_normalised_replicate <- readRDS(paste0("./results/compounds/se_normalised_per_replicate_", today_date, ".rds"))
se_normalised_replicate_mat <- SummarizedExperiment::assay(se_normalised_replicate)
se_normalised_pheno_data_replicate <- SummarizedExperiment::colData(se_normalised_replicate)
se_normalised_pheno_data_replicate$log10Conc <- if_else(se_normalised_pheno_data_replicate$Concentrations==0, 
                                   0, 
                                   -log10(se_normalised_pheno_data_replicate$Concentrations))
## Compute global correlation score
cor_per_replicate <- cor(se_normalised_replicate_mat)

## Define clustering colours
col_heatmap_scale <- circlize::colorRamp2(c(min(cor_per_replicate), 0, 1),
                                      c("blue", "white", "red"))

## Define custom colour Heatmap annotation
## num_batches <- length(unique(se_normalised_pheno_data_replicate$Batch_ID))
## num_compounds <- length(unique(se_normalised_pheno_data_replicate$Compound))
## num_moa <- length(unique(se_normalised_pheno_data_replicate$MoA))
## 
## batch_col <- setNames(colorRampPalette(brewer.pal(8, "Dark2"))(num_batches), 
##                       unique(se_normalised_pheno_data_replicate$Batch_ID))
## compound_col <- setNames(colorRampPalette(brewer.pal(11, "Spectral"))(num_compounds), 
##                          unique(se_normalised_pheno_data_replicate$Compound))
## moa_col <- setNames(colorRampPalette(brewer.pal(12, "Set3"))(num_moa), 
##                     unique(se_normalised_pheno_data_replicate$MoA))


### Heatmap annotation
top_ha <- ComplexHeatmap::HeatmapAnnotation(df = se_normalised_pheno_data_replicate |> 
                                          as.data.frame() |> 
                                          dplyr::select(Batch_ID, MoA, Compound)) 
                                        ## col = list(Batch_ID = batch_col, 
                                        ##            MoA = moa_col, 
                                        ##            Compound = compound_col))

row_ha <- ComplexHeatmap::rowAnnotation(Concentration =
                                          ComplexHeatmap::anno_barplot(se_normalised_pheno_data_replicate$log10Conc), 
                                        Duration = paste0(se_normalised_pheno_data_replicate$Duration, "d"))

## Generate Heatmap
heatmap_normalised_replicates <- ComplexHeatmap::Heatmap(cor_per_replicate, 
                                          col=col_heatmap_scale, 
                                          name = "CC for all Replicates", 
                                          show_row_names = TRUE,
                                          show_column_names = FALSE, 
                                          row_dend_reorder = TRUE,
                                          column_dend_reorder = TRUE, 
                                          row_names_gp = gpar(fontsize = 2), 
                                          top_annotation = top_ha, 
                                          right_annotation = row_ha) |> 
  ComplexHeatmap::draw() |> 
  grid::grid.grabExpr()

ggsave(paste0("figures/compounds/heatmap_normalised_replicates_", today_date,".pdf"), 
       heatmap_normalised_replicates, dpi = 600, width = 20, height = 20)
```

- Heatmap in @fig-heatmap-normalised-compound-batch is generated by averaging normalised barcode counts over replicates:

```{r}
#| label: fig-heatmap-normalised-compound-batch
#| fig-cap: "Heatmap of normalised compounds by batch(aggregated over replicates) with CC."

## Read SummarizedExperiment object
se_normalised_compound_batch <- readRDS(paste0("./results/compounds/se_normalised_per_compound_by_batch_", today_date, ".rds"))
se_normalised_compound_batch_mat <- SummarizedExperiment::assay(se_normalised_compound_batch)
se_pheno_data_normalised_compound_batch <- SummarizedExperiment::colData(se_normalised_compound_batch)
## Compute global correlation score
cor_per_compound_by_batch <- cor(se_normalised_compound_batch_mat)

## Define clustering colours
col_heatmap_scale <- circlize::colorRamp2(c(min(cor_per_compound_by_batch), 0, 1),
                                      c("blue", "white", "red"))

### Heatmap annotation
ha <- ComplexHeatmap::HeatmapAnnotation(df = se_pheno_data_normalised_compound_batch |> 
                                          as.data.frame() |> 
                                          dplyr::select(Pathway))

## Define Heatmap
heatmap_normalised_compound_batch <- ComplexHeatmap::Heatmap(cor_per_compound_by_batch, 
                                          col=col_heatmap_scale, 
                                          name = "CC for all Compound", 
                                          show_row_names = TRUE,
                                          show_column_names = TRUE, 
                                          row_dend_reorder = TRUE,
                                          column_dend_reorder = TRUE, 
                                          column_names_gp = gpar(fontsize = 8),
                                          row_names_gp = gpar(fontsize = 8), 
                                          top_annotation = ha) |> 
  ComplexHeatmap::draw() |> 
  grid::grid.grabExpr()

ggsave(paste0("figures/compounds/heatmap_normalised_compound_by_batch_", today_date,".pdf"), 
       heatmap_normalised_compound_batch, dpi = 600, width = 20, height = 20)
```


- Heatmap in @fig-heatmap-global-compound is generated at the compound level:

```{r}
#| label: fig-heatmap-normalised-compound
#| fig-cap: "Heatmap generated with the simple Pearson Correlation score."

## Read SummarizedExperiment object
se_normalised_compound <- readRDS(paste0("./results/compounds/se_normalised_per_compound_", today_date, ".rds"))
se_normalised_compound_mat <- SummarizedExperiment::assay(se_normalised_compound)
se_normalised_pheno_data_compound <- SummarizedExperiment::colData(se_normalised_compound)
## Compute global correlation score
cor_per_compound <- cor(se_normalised_compound_mat)

## Define clustering colours
col_heatmap_scale <- circlize::colorRamp2(c(min(cor_per_compound), 0, 1),
                                      c("blue", "white", "red"))

### Heatmap annotation
ha <- ComplexHeatmap::HeatmapAnnotation(df = se_normalised_pheno_data_compound |> 
                                          as.data.frame() |> 
                                          dplyr::select(Pathway))

## Define Heatmap
heatmap_normalised_compound <- ComplexHeatmap::Heatmap(cor_per_compound, 
                                          col=col_heatmap_scale, 
                                          name = "CC for all Compound", 
                                          show_row_names = TRUE,
                                          show_column_names = TRUE, 
                                          row_dend_reorder = FALSE,
                                          column_dend_reorder = TRUE, 
                                          ## font size
                                          row_names_gp = gpar(fontsize = 8), 
                                          top_annotation = ha) |> 
  ComplexHeatmap::draw() |> 
  grid::grid.grabExpr()

ggsave(paste0("figures/compounds/heatmap_normalised_compound_", today_date,".pdf"), 
       heatmap_normalised_compound, dpi = 600, width = 20, height = 20)
```

##### Heatmap with Pearson correlation and binarised values

- Heatmap at the replicates level in @fig-heatmap-binarised-replicates:

```{r}
#| label: fig-heatmap-binarised-replicates
#| fig-cap: "Heatmaps at the replicates level."

## Read SummarizedExperiment object
se_binarised_replicates <- readRDS(paste0("./results/compounds/se_discretised_per_replicate_", today_date, ".rds"))
se_binarised_replicates_mat <- SummarizedExperiment::assay(se_binarised_replicates)
se_binarised_pheno_data_replicate <- SummarizedExperiment::colData(se_binarised_replicates)
## Compute global correlation score
cor_per_replicates <- cor(se_binarised_replicates_mat)

## Define clustering colours
col_heatmap_scale <- circlize::colorRamp2(c(min(cor_per_replicates), 0, 1),
                                      c("blue", "white", "red"))

### Heatmap annotation
ha <- ComplexHeatmap::HeatmapAnnotation(df = se_binarised_pheno_data_replicate |> 
                                          as.data.frame() |> 
                                          dplyr::select(Pathway, Batch_ID, Compound))


heatmap_binarised_replicates <- ComplexHeatmap::Heatmap(cor_per_replicates, 
                                            col=col_heatmap_scale, 
                                            name = "CC at binarised Compound Level",
                                            show_row_names = TRUE,
                                            show_column_names = TRUE, 
                                            row_dend_reorder = FALSE,
                                            column_dend_reorder = TRUE, 
                                            ## font size
                                            row_names_gp = gpar(fontsize = 3), 
                                            top_annotation = ha) |> 
  ComplexHeatmap::draw() |> 
  grid::grid.grabExpr()

ggsave(paste0("figures/compounds/heatmap_binarised_replicates_", today_date,".pdf"), 
       heatmap_binarised_replicates, dpi = 600, width = 20, height = 20)                                            
```

- Heatmap at the compound by batch level in @fig-heatmap-binarised-compound-by-batch (aggregated over technical replicates):

```{r}
#| label: fig-heatmap-binarised-compound-by-batch
#| fig-cap: "Heatmaps at the compound by batch level."

## Read SummarizedExperiment object
se_binarised_compound_batch <- readRDS(paste0("./results/compounds/se_discretised_per_compound_by_batch_", today_date, ".rds"))
se_binarised_compound_batch_mat <- SummarizedExperiment::assay(se_binarised_compound_batch)
se_binarised_pheno_data_compound_batch <- SummarizedExperiment::colData(se_binarised_compound_batch)
## Compute global correlation score
cor_per_compound_by_batch <- cor(se_binarised_compound_batch_mat)

## Define clustering colours
col_heatmap_scale <- circlize::colorRamp2(c(min(cor_per_compound_by_batch), 0, 1),
                                      c("blue", "white", "red"))

### Heatmap annotation
ha <- ComplexHeatmap::HeatmapAnnotation(df = se_binarised_pheno_data_compound_batch |> 
                                          as.data.frame() |> 
                                          dplyr::select(Pathway, MoA))


heatmap_binarised_compound_batch <- ComplexHeatmap::Heatmap(cor_per_compound_by_batch, 
                                            col=col_heatmap_scale, 
                                            name = "CC at binarised Compound Level",
                                            show_row_names = TRUE,
                                            show_column_names = TRUE, 
                                            row_dend_reorder = FALSE,
                                            column_dend_reorder = TRUE, 
                                            ## font size
                                            row_names_gp = gpar(fontsize = 8), 
                                            top_annotation = ha) |> 
  ComplexHeatmap::draw() |> 
  grid::grid.grabExpr()

ggsave(paste0("figures/compounds/heatmap_binarised_compound_by_batch_", today_date,".pdf"), 
       heatmap_binarised_compound_batch, dpi = 600, width = 20, height = 20)                                            
```

- Heatmap at the compound level in @fig-heatmap-binarised-compound.

```{r}
#| label: fig-heatmap-binarised-compound
#| fig-cap: "Heamaps at the compound level."

## Read SummarizedExperiment object
se_binarised_compound <- readRDS(paste0("./results/compounds/se_discretised_per_compound_", today_date, ".rds"))
se_binarised_compound_mat <- SummarizedExperiment::assay(se_binarised_compound)
se_binarised_pheno_data_compound <- SummarizedExperiment::colData(se_binarised_compound)
## Compute global correlation score
cor_per_compound <- cor(se_binarised_compound_mat)

## Define clustering colours
col_heatmap_scale <- circlize::colorRamp2(c(min(cor_per_compound), 0, 1),
                                      c("blue", "white", "red"))

### Heatmap annotation
ha <- ComplexHeatmap::HeatmapAnnotation(df = se_binarised_pheno_data_compound |> 
                                          as.data.frame() |> 
                                          dplyr::select(Pathway, MoA))


heatmap_binarised_compound <- ComplexHeatmap::Heatmap(cor_per_compound, 
                                            col=col_heatmap_scale, 
                                            name = "CC at binarised Compound Level",
                                            show_row_names = TRUE,
                                            show_column_names = TRUE, 
                                            column_names_gp = gpar(fontsize = 8),
                                            row_dend_reorder = TRUE,
                                            column_dend_reorder = TRUE, 
                                            row_names_gp = gpar(fontsize = 8), 
                                            top_annotation = ha) |> 
  ComplexHeatmap::draw() |> 
  grid::grid.grabExpr()

ggsave(paste0("figures/compounds/heatmap_binarised_compound_", today_date,".pdf"), 
       heatmap_binarised_compound, dpi = 600, width = 20, height = 20)                                            
```


<!-- ```{r} -->
<!-- #| label: combine-Heatmap -->


<!-- p1 <- grid.grabExpr(ComplexHeatmap::draw(heatmap_compounds)) -->
<!-- p2 <- grid.grabExpr(ComplexHeatmap::draw(heatmap_replicates)) -->
<!-- heatmaps_global <- plot_grid(p1, p2, nrow = 1, labels = c("A", "B")) -->
<!-- ggsave("figures/heatmap_fingerprints.pdf",  -->
<!--        heatmaps_global, dpi = 600) -->
<!-- ``` -->


#### Compound Networks

- Plot weighted undirected compound graphs with `igraph::graph_from_adjacency_matrix` in @fig-igraph-drug, filtering out pairwise connections between 2 drugs if the $p$-value is not significant and absolute correlation score is below 0.8:

```{r}
#| label: fig-igraph-drug
#| fig-cap: "Drug-drug network interactions, at the compound level."

## 1) Compute correlation matrix and p-values ----
cor_res <- Hmisc::rcorr(se_binarised_compound_mat, type = "pearson")
cor_binarised_compound <- cor_res$r
pval_binarised_compound <- cor_res$P

adj_mat <- cor_binarised_compound
adj_mat[pval_binarised_compound > 0.05/ncol(cor_res)] <- 0

## 2) build igraph adjacency matrix ----
compound_graph <- igraph::graph_from_adjacency_matrix(adjmatrix=adj_mat, 
                                          weighted = TRUE,
                                          diag = FALSE, 
                                          mode = "undirected")
## 3) igraph customisation ----
compound_graph$date <- today_date
E(compound_graph)$color <- if_else(E(compound_graph)$weight >0, "red", "blue")
E(compound_graph)$weight <- abs(E(compound_graph)$weight)

layout_graph <- igraph::layout_with_fr(compound_graph,
                                       niter = 500)

vertex_structure <- se_binarised_pheno_data_compound |> 
  as.data.frame() |> 
  dplyr::mutate(color = if_else(Pathway=="EGFR", "green", "yellow"))

igraph::V(compound_graph)$color <- vertex_structure$color

pdf(paste0("figures/compounds/compound_graph_", today_date, ".pdf"), 
    width = 16, height = 16, useDingbats = TRUE, compress = FALSE)
plot(compound_graph, layout = layout_graph, vertex.size = 10,
     ## vertex.label.dist= 2,
     main = "Compound network interaction.
     In green, drugs related with the EGFR mechanism,
     and in yellow other pathways.
     Edge widths are proportional to the coefficient of correlation.", 
     edge.width = igraph::E(compound_graph)$weight * 20,
     vertex.label.cex = 1, curved = 0.2)
dev.off()

## 4) export PNG and readable graph formats for Neo4J
igraph::write_graph(graph = compound_graph, 
                    file = paste0("./results/compounds/compound_network_", today_date, ".graphml"),
                    format = "graphml")


```


### Compute Cell Lines Similarities

#### Cell Line by Compound

```{r}
#| label: fig-heatmap-cell-lines-by-samples
#| fig-cap: "Heatmap cell lines by samples, averaging over replicates."

se_binarised_compound_batch_fac <- apply(se_binarised_compound_batch_mat, 2, as.character)

### Heatmap annotation
ha <- ComplexHeatmap::HeatmapAnnotation(df = se_binarised_pheno_data_compound_batch |> 
                                          as.data.frame() |> 
                                          dplyr::select(Batch_ID, Pathway, Compound))

heatmap_cell_lines_by_sample <- ComplexHeatmap::Heatmap(se_binarised_compound_batch_fac, 
                                                        col = c("TRUE" = "red", "FALSE" = "blue"), 
                                                        name = "Heatmap: cell-line by sample",
                                                        show_row_names = FALSE,
                                                        row_dend_reorder = TRUE,
                                                        ## clustering_distance_rows = "pearson",
                                                        show_row_dend = FALSE,
                                                        column_dend_reorder = TRUE, 
                                                        show_column_names = TRUE, 
                                                        ## clustering_distance_columns = "pearson",
                                                        column_names_gp = gpar(fontsize = 4), 
                                                        top_annotation = ha, 
                                                        ## compression issues
                                                        use_raster = TRUE) |> 
  ComplexHeatmap::draw() |> 
  grid::grid.grabExpr()

ggsave(paste0("figures/cell_lines/heatmap_cell_lines_by_samples_", today_date,".pdf"), 
       heatmap_cell_lines_by_sample, dpi = 300, width = 20, height = 20)                                            
```

#### Cell Line Correlation


```{r}
#| label: fig-heatmap-cell-lines-by-cell-lines
#| fig-cap: "Histogram of the distribution of cell resistance (for a given barcode ID, returns the total number of cell lines identified)."
#| cache: true

## 1) evaluation of cell resistance
present_cells <- rowSums(se_binarised_compound_batch_mat)
hist(present_cells, 
     breaks = length(unique(present_cells)),
     main=NULL)

## 2) filtered Heatmaps 
threshold_cell_prevalence <- 10 ## alternatively, remove cells that are not present in all samples
se_binarised_compact <- se_binarised_compound_batch_mat[present_cells >
                                                             threshold_cell_prevalence, ]
cor_cell_lines <- cor(t(se_binarised_compact))
col_heatmap_scale <- circlize::colorRamp2(c(min(cor_cell_lines, na.rm = TRUE),
                                            0, 
                                            max(cor_cell_lines, na.rm = TRUE)),
                                      c("blue", "white", "red"))

## 3) generate Heatmap of correlation cell lines
heatmap_cell_lines_by_cell_lines <- ComplexHeatmap::Heatmap(cor_cell_lines, 
                                                        col = col_heatmap_scale, 
                                                        name = "Heatmap: cell-line by cell line",
                                                        show_row_names = FALSE,
                                                        row_dend_reorder = TRUE,
                                                        show_row_dend = TRUE,
                                                        column_dend_reorder = TRUE, 
                                                        show_column_names = FALSE, 
                                                        na_col = "black", 
                                                        use_raster = TRUE, 
                                                        raster_resize_mat = mean) |> 
  ComplexHeatmap::draw() |> 
  grid::grid.grabExpr()

ggsave(paste0("figures/cell_lines/heatmap_cell_lines_by_cell_lines_", today_date,".pdf"), 
       heatmap_cell_lines_by_cell_lines, dpi = 600, width = 20, height = 20)    
```

