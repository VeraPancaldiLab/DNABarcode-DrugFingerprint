{
  "hash": "901c9d0394387603ca706de4c115185c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Results: Heatmaps and Drug networks, based on barcode fingerprints\"\n---\n\n\n\n\n\n\n\n\n## Reproducibility\n\nI list below the R packages required to reproduce the analyses.\n\n\n\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## data wrangling\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(stringr)\nlibrary(purrr)\n\n## reporting\nlibrary(flextable)\n\n## plotting\nlibrary(ggplot2)\nlibrary(ComplexHeatmap)\nlibrary(cowplot)\nlibrary(grid)\nlibrary(RColorBrewer)\nlibrary(igraph)\n\n## auxiliary functions\nsource(\"R/utils.R\")\ntoday_date <- \"2025-04-28\"\n## today_date <- format(Sys.Date(), \"%Y-%m-%d\")\n\n## set the seed, for fixing generation of ComplexHeatmaps (dendogram clustering)\nset.seed(20)\n```\n:::\n\n\n\n\n\n\n\n\n\n\n## Compute Compound Similarities\n\n- [Actual computation of the correlation matrix using `stats::cor`.]{fg=\"blue\"}\n\n- [Yet, we have to try other correlation methods on the continuous space, or consider other metrics if working on the discrete space. Unbalanced Wassertein distance, or relatives, for distinct input and output dimensions.]{fg=\"red\"}\n\n### Compound Heatmaps\n\n- Some tutorials:\n\n  - [Blend of useful resources on generating Heatmaps](https://www.linkedin.com/posts/%F0%9F%8E%AF-ming-tommy-tang-40650014_making-a-heatmap-is-an-essential-skill-for-activity-7317543424511868928-F25t):\n  \n  - [Mapping quantitative data to color](https://www.nature.com/articles/nmeth.2134), from @gehlenborg2012nm:\n    \n  - **Real-Life Examples** with `ComplexHeatmap`: \n  \n    - [Heatmap with transcriptomic expression](https://rpubs.com/crazyhottommy/heatmap_demystified)\n    - [Heatmap with genomic expression](https://jokergoo.github.io/ComplexHeatmap-reference/book/more-examples.html)\n    - [Genome-level Heatmap](https://jokergoo.github.io/ComplexHeatmap-reference/book/genome-level-heatmap.html)\n    - [Plotting large heatmaps in R](https://gdevailly.netlify.app/post/plotting-big-matrices-in-r) and [*Rasterisation*, with thousands of genes to be considered](https://jokergoo.github.io/2020/06/30/rasterization-in-complexheatmap).\n    - [Control size of Heatmaps](https://jokergoo.github.io/2020/05/11/set-cell-width/height-in-the-heatmap/)\n    \n  - **Real-life examples** with [`ggplot2`](https://github.com/theislab/atlas-feature-selection-benchmark/blob/b89fc0f66747062e6e1b4b35bd392b27ad035295/analysis/R/plotting.R#L8)\n  \n  - **Real-Life examples** with [`funkyheatmap` CRAN package](https://funkyheatmap.github.io/)\n\n#### Heatmap with Pearson correlation score\n\n- Heatmap in @fig-heatmap-normalised-replicate is generated at the replicate level:\n\n\n\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Read SummarizedExperiment object\nse_normalised_replicate <- readRDS(paste0(\"./results/compounds/se_normalised_per_replicate_\", today_date, \".rds\"))\nse_normalised_replicate_mat <- SummarizedExperiment::assay(se_normalised_replicate)\nse_normalised_pheno_data_replicate <- SummarizedExperiment::colData(se_normalised_replicate)\nse_normalised_pheno_data_replicate$log10Conc <- if_else(se_normalised_pheno_data_replicate$Concentrations==0, \n                                   0, \n                                   -log10(se_normalised_pheno_data_replicate$Concentrations))\n## Compute global correlation score\ncor_per_replicate <- cor(se_normalised_replicate_mat)\n\n## Define clustering colours\ncol_heatmap_scale <- circlize::colorRamp2(c(min(cor_per_replicate), 0, 1),\n                                      c(\"blue\", \"white\", \"red\"))\n\n## Define custom colour Heatmap annotation\n## num_batches <- length(unique(se_normalised_pheno_data_replicate$Batch_ID))\n## num_compounds <- length(unique(se_normalised_pheno_data_replicate$Compound))\n## num_moa <- length(unique(se_normalised_pheno_data_replicate$MoA))\n## \n## batch_col <- setNames(colorRampPalette(brewer.pal(8, \"Dark2\"))(num_batches), \n##                       unique(se_normalised_pheno_data_replicate$Batch_ID))\n## compound_col <- setNames(colorRampPalette(brewer.pal(11, \"Spectral\"))(num_compounds), \n##                          unique(se_normalised_pheno_data_replicate$Compound))\n## moa_col <- setNames(colorRampPalette(brewer.pal(12, \"Set3\"))(num_moa), \n##                     unique(se_normalised_pheno_data_replicate$MoA))\n\n\n## Heatmap annotation\ntop_ha <- ComplexHeatmap::HeatmapAnnotation(df = se_normalised_pheno_data_replicate |> \n                                          as.data.frame() |> \n                                          dplyr::select(Batch_ID, MoA, Compound)) \n                                        ## col = list(Batch_ID = batch_col, \n                                        ##            MoA = moa_col, \n                                        ##            Compound = compound_col))\n\nrow_ha <- ComplexHeatmap::rowAnnotation(Concentration =\n                                          ComplexHeatmap::anno_barplot(se_normalised_pheno_data_replicate$log10Conc), \n                                        Duration = paste0(se_normalised_pheno_data_replicate$Duration, \"d\"))\n\n## Generate Heatmap\nheatmap_normalised_replicates <- ComplexHeatmap::Heatmap(cor_per_replicate, \n                                          col=col_heatmap_scale, \n                                          name = \"CC for all Replicates\", \n                                          show_row_names = TRUE,\n                                          show_column_names = FALSE, \n                                          row_dend_reorder = TRUE,\n                                          column_dend_reorder = TRUE, \n                                          row_names_gp = gpar(fontsize = 2), \n                                          top_annotation = top_ha, \n                                          right_annotation = row_ha) |> \n  ComplexHeatmap::draw() |> \n  grid::grid.grabExpr()\n\nggsave(paste0(\"figures/compounds/heatmap_normalised_replicates_\", today_date,\".pdf\"), \n       heatmap_normalised_replicates, dpi = 600, width = 20, height = 20)\n```\n:::\n\n\n\n\n\n\n\n\n- Heatmap in @fig-heatmap-normalised-compound-batch is generated by averaging normalised barcode counts over replicates:\n\n\n\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Read SummarizedExperiment object\nse_normalised_compound_batch <- readRDS(paste0(\"./results/compounds/se_normalised_per_compound_by_batch_\", today_date, \".rds\"))\nse_normalised_compound_batch_mat <- SummarizedExperiment::assay(se_normalised_compound_batch)\nse_pheno_data_normalised_compound_batch <- SummarizedExperiment::colData(se_normalised_compound_batch)\n## Compute global correlation score\ncor_per_compound_by_batch <- cor(se_normalised_compound_batch_mat)\n\n## Define clustering colours\ncol_heatmap_scale <- circlize::colorRamp2(c(min(cor_per_compound_by_batch), 0, 1),\n                                      c(\"blue\", \"white\", \"red\"))\n\n## Heatmap annotation\nha <- ComplexHeatmap::HeatmapAnnotation(df = se_pheno_data_normalised_compound_batch |> \n                                          as.data.frame() |> \n                                          dplyr::select(Pathway))\n\n## Define Heatmap\nheatmap_normalised_compound_batch <- ComplexHeatmap::Heatmap(cor_per_compound_by_batch, \n                                          col=col_heatmap_scale, \n                                          name = \"CC for all Compound\", \n                                          show_row_names = TRUE,\n                                          show_column_names = TRUE, \n                                          row_dend_reorder = TRUE,\n                                          column_dend_reorder = TRUE, \n                                          column_names_gp = gpar(fontsize = 8),\n                                          row_names_gp = gpar(fontsize = 8), \n                                          top_annotation = ha) |> \n  ComplexHeatmap::draw() |> \n  grid::grid.grabExpr()\n\nggsave(paste0(\"figures/compounds/heatmap_normalised_compound_by_batch_\", today_date,\".pdf\"), \n       heatmap_normalised_compound_batch, dpi = 600, width = 20, height = 20)\n```\n:::\n\n\n\n\n\n\n\n\n\n- Heatmap in @fig-heatmap-global-compound is generated at the compound level:\n\n\n\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Read SummarizedExperiment object\nse_normalised_compound <- readRDS(paste0(\"./results/compounds/se_normalised_per_compound_\", today_date, \".rds\"))\nse_normalised_compound_mat <- SummarizedExperiment::assay(se_normalised_compound)\nse_normalised_pheno_data_compound <- SummarizedExperiment::colData(se_normalised_compound)\n## Compute global correlation score\ncor_per_compound <- cor(se_normalised_compound_mat)\n\n## Define clustering colours\ncol_heatmap_scale <- circlize::colorRamp2(c(min(cor_per_compound), 0, 1),\n                                      c(\"blue\", \"white\", \"red\"))\n\n## Heatmap annotation\nha <- ComplexHeatmap::HeatmapAnnotation(df = se_normalised_pheno_data_compound |> \n                                          as.data.frame() |> \n                                          dplyr::select(Pathway))\n\n## Define Heatmap\nheatmap_normalised_compound <- ComplexHeatmap::Heatmap(cor_per_compound, \n                                          col=col_heatmap_scale, \n                                          name = \"CC for all Compound\", \n                                          show_row_names = TRUE,\n                                          show_column_names = TRUE, \n                                          row_dend_reorder = FALSE,\n                                          column_dend_reorder = TRUE, \n                                          ## font size\n                                          row_names_gp = gpar(fontsize = 8), \n                                          top_annotation = ha) |> \n  ComplexHeatmap::draw() |> \n  grid::grid.grabExpr()\n\nggsave(paste0(\"figures/compounds/heatmap_normalised_compound_\", today_date,\".pdf\"), \n       heatmap_normalised_compound, dpi = 600, width = 20, height = 20)\n```\n:::\n\n\n\n\n\n\n\n\n#### Heatmap with Pearson correlation and binarised values\n\n- Heatmap at the replicates level in @fig-heatmap-binarised-replicates:\n\n\n\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Read SummarizedExperiment object\nse_binarised_replicates <- readRDS(paste0(\"./results/compounds/se_discretised_per_replicate_\", today_date, \".rds\"))\nse_binarised_replicates_mat <- SummarizedExperiment::assay(se_binarised_replicates)\nse_binarised_pheno_data_replicate <- SummarizedExperiment::colData(se_binarised_replicates)\n## Compute global correlation score\ncor_per_replicates <- cor(se_binarised_replicates_mat)\n\n## Define clustering colours\ncol_heatmap_scale <- circlize::colorRamp2(c(min(cor_per_replicates), 0, 1),\n                                      c(\"blue\", \"white\", \"red\"))\n\n## Heatmap annotation\nha <- ComplexHeatmap::HeatmapAnnotation(df = se_binarised_pheno_data_replicate |> \n                                          as.data.frame() |> \n                                          dplyr::select(Pathway, Batch_ID, Compound))\n\n\nheatmap_binarised_replicates <- ComplexHeatmap::Heatmap(cor_per_replicates, \n                                            col=col_heatmap_scale, \n                                            name = \"CC at binarised Compound Level\",\n                                            show_row_names = TRUE,\n                                            show_column_names = TRUE, \n                                            row_dend_reorder = FALSE,\n                                            column_dend_reorder = TRUE, \n                                            ## font size\n                                            row_names_gp = gpar(fontsize = 3), \n                                            top_annotation = ha) |> \n  ComplexHeatmap::draw() |> \n  grid::grid.grabExpr()\n\nggsave(paste0(\"figures/compounds/heatmap_binarised_replicates_\", today_date,\".pdf\"), \n       heatmap_binarised_replicates, dpi = 600, width = 20, height = 20)                                            \n```\n:::\n\n\n\n\n\n\n\n\n- Heatmap at the compound by batch level in @fig-heatmap-binarised-compound-by-batch (aggregated over technical replicates):\n\n\n\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Read SummarizedExperiment object\nse_binarised_compound_batch <- readRDS(paste0(\"./results/compounds/se_discretised_per_compound_by_batch_\", today_date, \".rds\"))\nse_binarised_compound_batch_mat <- SummarizedExperiment::assay(se_binarised_compound_batch)\nse_binarised_pheno_data_compound_batch <- SummarizedExperiment::colData(se_binarised_compound_batch)\n## Compute global correlation score\ncor_per_compound_by_batch <- cor(se_binarised_compound_batch_mat)\n\n## Define clustering colours\ncol_heatmap_scale <- circlize::colorRamp2(c(min(cor_per_compound_by_batch), 0, 1),\n                                      c(\"blue\", \"white\", \"red\"))\n\n## Heatmap annotation\nha <- ComplexHeatmap::HeatmapAnnotation(df = se_binarised_pheno_data_compound_batch |> \n                                          as.data.frame() |> \n                                          dplyr::select(Pathway, MoA))\n\n\nheatmap_binarised_compound_batch <- ComplexHeatmap::Heatmap(cor_per_compound_by_batch, \n                                            col=col_heatmap_scale, \n                                            name = \"CC at binarised Compound Level\",\n                                            show_row_names = TRUE,\n                                            show_column_names = TRUE, \n                                            row_dend_reorder = FALSE,\n                                            column_dend_reorder = TRUE, \n                                            ## font size\n                                            row_names_gp = gpar(fontsize = 8), \n                                            top_annotation = ha) |> \n  ComplexHeatmap::draw() |> \n  grid::grid.grabExpr()\n\nggsave(paste0(\"figures/compounds/heatmap_binarised_compound_by_batch_\", today_date,\".pdf\"), \n       heatmap_binarised_compound_batch, dpi = 600, width = 20, height = 20)                                            \n```\n:::\n\n\n\n\n\n\n\n\n- Heatmap at the compound level in @fig-heatmap-binarised-compound.\n\n\n\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Read SummarizedExperiment object\nse_binarised_compound <- readRDS(paste0(\"./results/compounds/se_discretised_per_compound_\", today_date, \".rds\"))\nse_binarised_compound_mat <- SummarizedExperiment::assay(se_binarised_compound)\nse_binarised_pheno_data_compound <- SummarizedExperiment::colData(se_binarised_compound)\n## Compute global correlation score\ncor_per_compound <- cor(se_binarised_compound_mat)\n\n## Define clustering colours\ncol_heatmap_scale <- circlize::colorRamp2(c(min(cor_per_compound), 0, 1),\n                                      c(\"blue\", \"white\", \"red\"))\n\n## Heatmap annotation\nha <- ComplexHeatmap::HeatmapAnnotation(df = se_binarised_pheno_data_compound |> \n                                          as.data.frame() |> \n                                          dplyr::select(Pathway, MoA))\n\n\nheatmap_binarised_compound <- ComplexHeatmap::Heatmap(cor_per_compound, \n                                            col=col_heatmap_scale, \n                                            name = \"CC at binarised Compound Level\",\n                                            show_row_names = TRUE,\n                                            show_column_names = TRUE, \n                                            column_names_gp = gpar(fontsize = 8),\n                                            row_dend_reorder = TRUE,\n                                            column_dend_reorder = TRUE, \n                                            row_names_gp = gpar(fontsize = 8), \n                                            top_annotation = ha) |> \n  ComplexHeatmap::draw() |> \n  grid::grid.grabExpr()\n\nggsave(paste0(\"figures/compounds/heatmap_binarised_compound_\", today_date,\".pdf\"), \n       heatmap_binarised_compound, dpi = 600, width = 20, height = 20)                                            \n```\n:::\n\n\n\n\n\n\n\n\n\n<!-- ```{r} -->\n<!-- #| label: combine-Heatmap -->\n\n\n<!-- p1 <- grid.grabExpr(ComplexHeatmap::draw(heatmap_compounds)) -->\n<!-- p2 <- grid.grabExpr(ComplexHeatmap::draw(heatmap_replicates)) -->\n<!-- heatmaps_global <- plot_grid(p1, p2, nrow = 1, labels = c(\"A\", \"B\")) -->\n<!-- ggsave(\"figures/heatmap_fingerprints.pdf\",  -->\n<!--        heatmaps_global, dpi = 600) -->\n<!-- ``` -->\n\n\n### Compound Networks\n\n- Plot weighted undirected compound graphs with `igraph::graph_from_adjacency_matrix` in @fig-igraph-drug, filtering out pairwise connections between 2 drugs if the $p$-value is not significant and absolute correlation score is below 0.8:\n\n\n\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## 1) Compute correlation matrix and p-values ----\ncor_res <- Hmisc::rcorr(se_binarised_compound_mat, type = \"pearson\")\ncor_binarised_compound <- cor_res$r\npval_binarised_compound <- cor_res$P\n\nadj_mat <- cor_binarised_compound\nadj_mat[pval_binarised_compound > 0.05/ncol(cor_res)] <- 0\n\n## 2) build igraph adjacency matrix ----\ncompound_graph <- igraph::graph_from_adjacency_matrix(adjmatrix=adj_mat, \n                                          weighted = TRUE,\n                                          diag = FALSE, \n                                          mode = \"undirected\")\n## 3) igraph customisation ----\ncompound_graph$date <- today_date\nE(compound_graph)$color <- if_else(E(compound_graph)$weight >0, \"red\", \"blue\")\nE(compound_graph)$weight <- abs(E(compound_graph)$weight)\n\nlayout_graph <- igraph::layout_with_fr(compound_graph,\n                                       niter = 500)\n\nvertex_structure <- se_binarised_pheno_data_compound |> \n  as.data.frame() |> \n  dplyr::mutate(color = if_else(Pathway==\"EGFR\", \"green\", \"yellow\"))\n\nigraph::V(compound_graph)$color <- vertex_structure$color\n\npdf(paste0(\"figures/compounds/compound_graph_\", today_date, \".pdf\"), \n    width = 16, height = 16, useDingbats = TRUE, compress = FALSE)\nplot(compound_graph, layout = layout_graph, vertex.size = 10,\n     ## vertex.label.dist= 2,\n     main = \"Compound network interaction.\n     In green, drugs related with the EGFR mechanism,\n     and in yellow other pathways.\n     Edge widths are proportional to the coefficient of correlation.\", \n     edge.width = igraph::E(compound_graph)$weight * 20,\n     vertex.label.cex = 1, curved = 0.2)\ndev.off()\n##  png \n##    2\n\n## 4) export PNG and readable graph formats for Neo4J\nigraph::write_graph(graph = compound_graph, \n                    file = paste0(\"./results/compounds/compound_network_\", today_date, \".graphml\"),\n                    format = \"graphml\")\n\n```\n:::\n\n\n\n\n\n\n\n\n\n## Compute Cell Lines Similarities\n\n### Cell Line by Compound\n\n\n\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nse_binarised_compound_batch_fac <- apply(se_binarised_compound_batch_mat, 2, as.character)\n\n## Heatmap annotation\nha <- ComplexHeatmap::HeatmapAnnotation(df = se_binarised_pheno_data_compound_batch |> \n                                          as.data.frame() |> \n                                          dplyr::select(Batch_ID, Pathway, Compound))\n\nheatmap_cell_lines_by_sample <- ComplexHeatmap::Heatmap(se_binarised_compound_batch_fac, \n                                                        col = c(\"TRUE\" = \"red\", \"FALSE\" = \"blue\"), \n                                                        name = \"Heatmap: cell-line by sample\",\n                                                        show_row_names = FALSE,\n                                                        row_dend_reorder = TRUE,\n                                                        ## clustering_distance_rows = \"pearson\",\n                                                        show_row_dend = FALSE,\n                                                        column_dend_reorder = TRUE, \n                                                        show_column_names = TRUE, \n                                                        ## clustering_distance_columns = \"pearson\",\n                                                        column_names_gp = gpar(fontsize = 4), \n                                                        top_annotation = ha, \n                                                        ## compression issues\n                                                        use_raster = TRUE) |> \n  ComplexHeatmap::draw() |> \n  grid::grid.grabExpr()\n\nggsave(paste0(\"figures/cell_lines/heatmap_cell_lines_by_samples_\", today_date,\".pdf\"), \n       heatmap_cell_lines_by_sample, dpi = 300, width = 20, height = 20)                                            \n```\n:::\n\n\n\n\n\n\n\n\n### Cell Line Correlation\n\n\n\n\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## 1) evaluation of cell resistance\npresent_cells <- rowSums(se_binarised_compound_batch_mat)\nhist(present_cells, \n     breaks = length(unique(present_cells)),\n     main=NULL)\n\n## 2) filtered Heatmaps \nthreshold_cell_prevalence <- 10 ## alternatively, remove cells that are not present in all samples\nse_binarised_compact <- se_binarised_compound_batch_mat[present_cells >\n                                                             threshold_cell_prevalence, ]\ncor_cell_lines <- cor(t(se_binarised_compact))\ncol_heatmap_scale <- circlize::colorRamp2(c(min(cor_cell_lines, na.rm = TRUE),\n                                            0, \n                                            max(cor_cell_lines, na.rm = TRUE)),\n                                      c(\"blue\", \"white\", \"red\"))\n\n## 3) generate Heatmap of correlation cell lines\nheatmap_cell_lines_by_cell_lines <- ComplexHeatmap::Heatmap(cor_cell_lines, \n                                                        col = col_heatmap_scale, \n                                                        name = \"Heatmap: cell-line by cell line\",\n                                                        show_row_names = FALSE,\n                                                        row_dend_reorder = TRUE,\n                                                        show_row_dend = TRUE,\n                                                        column_dend_reorder = TRUE, \n                                                        show_column_names = FALSE, \n                                                        na_col = \"black\", \n                                                        use_raster = TRUE, \n                                                        raster_resize_mat = mean) |> \n  ComplexHeatmap::draw() |> \n  grid::grid.grabExpr()\n\nggsave(paste0(\"figures/cell_lines/heatmap_cell_lines_by_cell_lines_\", today_date,\".pdf\"), \n       heatmap_cell_lines_by_cell_lines, dpi = 600, width = 20, height = 20)    \n```\n\n::: {.cell-output-display}\n![Histogram of the distribution of cell resistance (for a given barcode ID, returns the total number of cell lines identified).](results_files/figure-docx/fig-heatmap-cell-lines-by-cell-lines-1.png){#fig-heatmap-cell-lines-by-cell-lines fig-align='center' width=100%}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}